{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","localPoints","Number","window","localStorage","getItem","gamble","points","a","pointObject","axios","post","newPoints","data","hasPoints","state","noPoints","untilNext","untilNextReward","text","handlePress","added","setState","setItem","className","onClick","this","alt","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAkFeA,E,YA5Eb,WAAYC,GAAQ,IAAD,sBACjB,IAAIC,EAAcC,OAAOC,OAAOC,aAAaC,QAAQ,WADpC,OAEG,OAAhBJ,IACFA,EAAc,KAEhB,4CAAMD,KAMRM,OAXmB,uCAWV,WAAOC,GAAP,iBAAAC,EAAA,6DACDC,EAAc,CAClBF,UAFK,SAIeG,IAAMC,KAAK,IAAKF,GAJ/B,cAKPG,GADIA,EAJG,QAKeC,KALf,kBAMAD,GANA,2CAXU,wDAoBnBE,UAAY,WACV,OACE,uFAC4D,EAAKC,MAAMR,OADvE,aAtBe,EA4BnBS,SAAW,WACT,OACE,iDACsB,EAAKD,MAAMR,OADjC,qDA9Be,EAoCnBU,UAAY,WACV,OACE,8DACmC,EAAKF,MAAMG,gBAD9C,2CAtCe,EA4CnBC,KAAO,WACL,OAA0B,IAAtB,EAAKJ,MAAMR,OACL,EAAKS,WAEL,EAAKF,aAhDE,EAoDnBM,YAAc,wCAAM,4BAAAZ,EAAA,sEACE,EAAKF,OAAO,EAAKS,MAAMR,QADzB,OACZc,EADY,OAElB,EAAKC,SAAS,CACZf,OAAQc,EAAMd,OACdW,gBAAiBG,EAAMH,kBAEzBf,OAAOC,aAAamB,QAAQ,SAAU,EAAKR,MAAMR,QAN/B,4CA9ClB,EAAKQ,MAAQ,CACXR,OAAQN,GAPO,E,sEA8DjB,OACE,yBAAKuB,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAQC,QAASC,KAAKN,cAAeO,IAAI,QAAzC,WAGCD,KAAKP,OACLO,KAAKX,MAAMG,mBAA2C,IAAtBQ,KAAKX,MAAMR,SAAiBmB,KAAKT,kB,GAtE1DW,IAAMC,WCOJC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cbfd7edb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    let localPoints = Number(window.localStorage.getItem('points'))\n    if (localPoints === null) {\n      localPoints = 20\n    }\n    super(props);\n    this.state = {\n      points: localPoints\n    };\n  }\n\n  gamble = async (points) => {\n    const pointObject = {\n      points\n    }\n    let newPoints = await axios.post('/', pointObject)\n    newPoints = newPoints.data\n    return newPoints\n  }\n\n  hasPoints = () => {\n    return (\n      <p>\n        Push the button to gamble for points. You currently have {this.state.points} points.\n      </p>\n    )\n  }\n\n  noPoints = () => {\n    return (\n      <p>\n        You currently have {this.state.points} points. Push the button if you wish to restart.\n      </p>\n    )\n  }\n\n  untilNext = () => {\n    return (\n      <p>\n        Someone has to press the button {this.state.untilNextReward} times until the next reward is given.\n      </p>\n    )\n  }\n\n  text = () => {\n    if (this.state.points === 0) {\n      return (this.noPoints())\n    } else {\n      return (this.hasPoints())\n    }\n  }\n\n  handlePress = () => async () => {\n    const added = await this.gamble(this.state.points)\n    this.setState({\n      points: added.points,\n      untilNextReward: added.untilNextReward\n    })\n    window.localStorage.setItem('points', this.state.points)\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          <button onClick={this.handlePress()} alt=\"logo\" >\n            PUSH ME\n          </button>\n          {this.text()}\n          {this.state.untilNextReward && !(this.state.points === 0) && this.untilNext()}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}